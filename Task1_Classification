#Task_1 (Classification): Used 3D CNN with pruning to reduce model size and improve energy efficiency.
import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.callbacks import EarlyStopping

# 3D CNN model
def build_3d_cnn(input_shape):
    model = models.Sequential()
    model.add(layers.Conv3D(32, kernel_size=(3, 3, 3), activation='relu', input_shape=input_shape))
    model.add(layers.MaxPooling3D(pool_size=(2, 2, 2)))
    model.add(layers.Conv3D(64, kernel_size=(3, 3, 3), activation='relu'))
    model.add(layers.MaxPooling3D(pool_size=(2, 2, 2)))
    model.add(layers.Conv3D(128, kernel_size=(3, 3, 3), activation='relu'))
    model.add(layers.GlobalAveragePooling3D())
    model.add(layers.Dense(64, activation='relu'))
    model.add(layers.Dense(1, activation='sigmoid'))  # Binary classification

    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
    return model

# Example data
input_shape = (64, 64, 64, 1)  # Modify based on dataset
model = build_3d_cnn(input_shape)

# Early stopping
early_stop = EarlyStopping(monitor='val_loss', patience=10)

# Train the model (replace X_train, y_train, X_val, y_val with your dataset)
# model.fit(X_train, y_train, epochs=50, validation_data=(X_val, y_val), callbacks=[early_stop])

# Post-training pruning (TensorFlow model optimization API)
import tensorflow_model_optimization as tfmot
prune_low_magnitude = tfmot.sparsity.keras.prune_low_magnitude
pruning_params = {
      'pruning_schedule': tfmot.sparsity.keras.PolynomialDecay(initial_sparsity=0.50,
                                                               final_sparsity=0.80,
                                                               begin_step=2000,
                                                               end_step=4000)
}
pruned_model = prune_low_magnitude(model, **pruning_params)

# Re-train pruned model
# pruned_model.fit(X_train, y_train, epochs=50, validation_data=(X_val, y_val), callbacks=[early_stop])
